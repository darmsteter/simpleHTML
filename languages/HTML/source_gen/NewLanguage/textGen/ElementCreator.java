package NewLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jdom.Element;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jdom.Document;
import org.jdom.output.XMLOutputter;
import org.jdom.output.Format;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public abstract class ElementCreator {
  private static final Logger LOG = Logger.getLogger(ElementCreator.class);
  public static void byElement(SNode node, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    Element result = new Element("html");
    if (SLinkOperations.getTarget(node, LINKS.head$1Ymr) != null) {
      Element head = ElementCreator.createHead(SLinkOperations.getTarget(node, LINKS.head$1Ymr), ctx);
      result.addContent(head);
    }
    Document document = new Document();
    document.setContent(result);
    try {
      XMLOutputter htmlOutputter = new XMLOutputter();
      htmlOutputter.setFormat(Format.getPrettyFormat());
      String output = htmlOutputter.outputString(document);
      tgs.append("<!DOCTYPE html>");
      tgs.append(output);
    } catch (Exception e) {
      if (LOG.isErrorLevel()) {
        LOG.error("Can't serialize text", e);
      }
    }

  }
  protected static Element createHead(SNode head, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    Element result = new Element("head");
    for (SNode headElement : SLinkOperations.getChildren(head, LINKS.content$b1cZ)) {
      if (SLinkOperations.getTarget(headElement, LINKS.attribute$cnGL) != null) {
        ElementCreator.createAttribute(result, headElement, ctx);
      }
      if (SNodeOperations.isInstanceOf(headElement, CONCEPTS.HeadElement$is)) {
        result.addContent(ElementCreator.createHead(SNodeOperations.cast(headElement, CONCEPTS.HeadElement$is), ctx));
      }
    }
    return result;
  }
  protected static Element createAttribute(Element element, SNode headElement, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    element.setAttribute(SPropertyOperations.getString(SLinkOperations.getTarget(headElement, LINKS.attribute$cnGL), PROPS.name$MnvL), SPropertyOperations.getString(SLinkOperations.getTarget(headElement, LINKS.attribute$cnGL), PROPS.value$aX4U));
    return element;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink head$1Ymr = MetaAdapterFactory.getContainmentLink(0x6b97a825706c4630L, 0x9e0f315c0b91cdb2L, 0x2532880eb86d8c09L, 0x2532880eb876268cL, "head");
    /*package*/ static final SContainmentLink attribute$cnGL = MetaAdapterFactory.getContainmentLink(0x6b97a825706c4630L, 0x9e0f315c0b91cdb2L, 0x2532880eb87630abL, 0x2532880eb877bb7cL, "attribute");
    /*package*/ static final SContainmentLink content$b1cZ = MetaAdapterFactory.getContainmentLink(0x6b97a825706c4630L, 0x9e0f315c0b91cdb2L, 0x2532880eb87622b0L, 0x2532880eb8764b12L, "content");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept HeadElement$is = MetaAdapterFactory.getConcept(0x6b97a825706c4630L, 0x9e0f315c0b91cdb2L, 0x2532880eb87630abL, "NewLanguage.structure.HeadElement");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty value$aX4U = MetaAdapterFactory.getProperty(0x6b97a825706c4630L, 0x9e0f315c0b91cdb2L, 0x2532880eb86d7575L, 0x2532880eb86d7c7aL, "value");
  }
}
